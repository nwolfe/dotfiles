# -*- mode: sh -*-

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

export DOTFILES=$HOME/.dotfiles
export EDITOR=vim
export VISUAL=$EDITOR
export DEV_ROOT=$HOME/ws/puppet/
JAVA_HOME=$(/usr/libexec/java_home -v 17)
export JAVA_HOME
export FZF_DEFAULT_COMMAND='rg --files --hidden'

# Disable shell-specific history files in ~/.bash_sessions/
# in favor of a global shared history file
export SHELL_SESSION_HISTORY=0

# Brighten the blue color of directories in ls output
export LSCOLORS=Exfxcxdxbxegedabagacad

export PATH=\
$HOME/bin:\
/usr/local/opt/node@16/bin:\
/usr/local/opt/ruby@2.7/bin:\
/usr/local/sbin:\
$PATH

alias path='echo -e ${PATH//:/\\n}'

# Tell me all your seacrest
[ -r ~/.seacrest/bashenv ] && . ~/.seacrest/bashenv

# Navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias cdd='cd $DOTFILES'

# cd <repo>
pl() {
    cd "$DEV_ROOT/$1" || return
}

# Verify destruction
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'

# List directory contents
# -h  Human-readable file sizes
# -G  Colored output
# -F  Append special character denoting file type
# -A  Show hidden entries, but hide . and ..
# -1  One entry per line
alias ls='ls -FG'
alias ll='ls -hl'
alias la='ls -A'

# Git
alias ga='git add'
alias gb='git branch'
alias gc='git commit'
alias gcm='git checkout main'
alias gco='git checkout'
alias gd='git diff'
alias gds='git diff --staged'
alias gl='git log'
alias gs='git status'

# Miscellaneous
alias cat=bat
alias top=htop
alias v=vim
alias be='bundle exec'

# NOTE the "function" is necessary for single-letter function names
function t() {
    local timestamp=$(date "+%A, %B %e, %Y - %l:%M%p")
    sed -i '' "1s/.*/# $timestamp/" "$HOME"/TODO.md
    vim +"/^\n" +nohlsearch +startinsert "$HOME"/TODO.md
}

cheat() {
    where="$1"; shift
    IFS=+ curl "https://cheat.sh/$where $*"
}

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# These commands are not useful to store in history so ignore them.
#
# Generally, commands that are 2 or 3 letters are not worth storing
# because it's just as easy to re-type them, such as the various g*
# aliases for git commands.
#
# Also ignore commands that are very broad and not contextual at all,
# such as clear/exit/top/history/update.
#
# NOTE many of these are actually aliases set elsewhere in .bashrc
HISTIGNORE=\
ls:la:ll:\
pl:cd:cdd:..:...:....:\
ga:gb:gc:gcm:gco:gd:gds:gl:gs:\
fg:jobs:bc:clear:exit:history:alias:\
top:env:path:update:stretch:\
t:v:vi:vim:\
htop:fzf

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

_YELLOW=$(tput setaf 3)
_GREEN=$(tput setaf 2)
_BLUE=$(tput setaf 4)
_BOLD=$(tput bold)
_RESET=$(tput sgr0)

_ps1_git() {
    # Show branch name
    local branch="$(git branch --show-current 2> /dev/null)"
    test -z "$branch" && return

    # Show symbols *+- for modified,added,deleted files
    local mod=
    local add=
    local del=
    for i in $(git status --short 2> /dev/null); do
        case $i in
            M) mod='*' ;;
            A) add='+' ;;
            D) del='-' ;;
            *) ;;
        esac
    done
    local status=${mod}${add}${del}
    test -n "$status" && status=" $status"

    # Escape colors with \001 \002 to not break terminal width/line wrapping
    printf " (\001${_BOLD}${_YELLOW}\002${branch}\001${_RESET}\002${status})"
}

# \u = user
# \h = host
# \w = absolute path to current directory
# \W = current directory
# Escape colors with \[ \] to not break terminal width/line wrapping
PS1="\[${_BOLD}${_GREEN}\]\h\[${_RESET}\]:\[${_BOLD}${_BLUE}\]\w\[${_RESET}\]\$(_ps1_git)\$ "

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Enable Bash 4 (via Homebrew) completion
if [ -f /usr/local/share/bash-completion/bash_completion ]; then
    . /usr/local/share/bash-completion/bash_completion
fi

# Enable bash-completion2
if [ -r /usr/local/etc/profile.d/bash_completion.sh ]; then
    . /usr/local/etc/profile.d/bash_completion.sh
fi

# Enable ENV variable tab completion
# See: https://askubuntu.com/questions/70750/how-to-get-bash-to-stop-escaping-during-tab-completion
shopt -s direxpand

# Wire up standard completions for aliases
BUGFIX_git_add() {
    __git_cmd_idx=1 _git_add
}
BUGFIX_git_branch() {
    __git_cmd_idx=1 _git_branch
}
BUGFIX_git_checkout() {
    __git_cmd_idx=1 _git_checkout
}
__git_complete ga BUGFIX_git_add
__git_complete gb BUGFIX_git_branch
__git_complete gco BUGFIX_git_checkout
__git_complete gd _git_diff
__git_complete gl _git_log
__git_complete gs _git_status

_get_repos() {
    for repo in $(ls -d $DEV_ROOT/*/); do
        if [ -d $repo/.git ]; then
            basename $repo
        fi
    done
}

_repo_completion() {
    if [ "${#COMP_WORDS[@]}" != "2" ]; then
        return
    fi

    options=$(_get_repos)
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[1]}"))
}

complete -F _repo_completion pl

_get_pre_commit_hooks() {
    find $DOTFILES/git/hooks/pre-commit -type f -exec basename {} \;
}

_pre_commit_hook_completion() {
    if [ "${#COMP_WORDS[@]}" != "2" ]; then
        return
    fi

    options=$(_get_pre_commit_hooks)
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[1]}"))
}

complete -F _pre_commit_hook_completion install-pre-commit-hook

_get_dr_subcommands() {
    # Find subcommands from source files.
    # Skip the root.go file because it's not actually a subcommand.
    find "$DOTFILES"/golang/nwolfe/dr/cmd -type f ! -name "root.go" -exec basename {} .go \;
}

_dr_completion() {
    # Prevents [tab][tab]... from repeatedly adding the completion
    if [ "${#COMP_WORDS[@]}" != "2" ]; then
        return
    fi

    options=$(_get_dr_subcommands)
    COMPREPLY=($(compgen -W "$options" "${COMP_WORDS[1]}"))
}

complete -F _dr_completion dr

complete -W "all brew" update

_cht_complete()
{
    local cur prev opts
    _get_comp_words_by_ref -n : cur

    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="$(curl -s cheat.sh/:list)"

    if [ ${COMP_CWORD} = 1 ]; then
          COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
          __ltrim_colon_completions "$cur"
    fi
    return 0
}

complete -F _cht_complete cheat

# Notify me ASAP if my SSH agent has no keys
if ! ssh-add -l > /dev/null; then
    echo "NOTICE: No SSH keys added to agent"
fi
